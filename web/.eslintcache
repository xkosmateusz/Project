[{"C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\App.tsx":"1","C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\components\\Users.tsx":"2","C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\components\\users.tsx":"3","C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\reportWebVitals.ts":"4","C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\components\\Landing.tsx":"5","C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\pages\\Signup.tsx":"6","C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\index.tsx":"7","C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\pages\\Login.tsx":"8","C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\components\\IsAuthenticated.tsx":"9","C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\pages\\Profile.tsx":"10","C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\components\\CreateProfile.tsx":"11"},{"size":1554,"mtime":1611923716097,"results":"12","hashOfConfig":"13"},{"size":549,"mtime":1611858932125,"results":"14","hashOfConfig":"13"},{"size":549,"mtime":1611858932125,"results":"15","hashOfConfig":"13"},{"size":425,"mtime":1611850961737,"results":"16","hashOfConfig":"13"},{"size":1662,"mtime":1611918708089,"results":"17","hashOfConfig":"13"},{"size":3177,"mtime":1611917770475,"results":"18","hashOfConfig":"13"},{"size":500,"mtime":1611850961737,"results":"19","hashOfConfig":"13"},{"size":2498,"mtime":1611917734183,"results":"20","hashOfConfig":"13"},{"size":608,"mtime":1611878649081,"results":"21","hashOfConfig":"13"},{"size":820,"mtime":1611928781637,"results":"22","hashOfConfig":"13"},{"size":2472,"mtime":1611929141931,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"d4sr5z",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"35"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\App.tsx",[],"C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\components\\Users.tsx",[],["51","52"],"C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\components\\users.tsx",[],"C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\reportWebVitals.ts",[],"C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\components\\Landing.tsx",[],["53","54"],"C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\pages\\Signup.tsx",["55"],"import React from 'react'\r\nimport {gql, useMutation} from '@apollo/client'\r\nimport {ErrorMessage, Field, Form, Formik} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport TwitterLogo from \"../styles/assets/twitter-logo.png\"\r\n\r\nconst SIGNUP_MUTATION = gql`\r\nmutation signup($name: String, $email: String!, $password: String!) {\r\n    signup(name: $name, email: $email, password: $password) {\r\n        token\r\n    }\r\n}\r\n`\r\n\r\ninterface SignupValues {\r\n    email: string\r\n    password: string\r\n    confirmPassword: string\r\n    name: string\r\n}\r\n\r\nfunction Signup() {\r\n    const history = useHistory()\r\n    const [signup, {data}] = useMutation(SIGNUP_MUTATION)\r\n\r\n    const initialValues: SignupValues = {\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        name: \"\"\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string()\r\n            .email(\"Niewłaściwy adres email\")\r\n            .required(\"Wymagany adres email\"),\r\n        password: Yup.string()\r\n            .max(20, \"Maksymalnie 20 znaków\")\r\n            .required(\"Wymagane hasło\"),\r\n        confirmPassword: Yup.string().oneOf(\r\n            [Yup.ref(\"password\"), null],\r\n            \"Hasła muszą się zgadzać\"\r\n        ),\r\n        name: Yup.string()\r\n        .max(15, \"Maksymalnie 15 znaków\")\r\n        .required(\"Wymagane imię\"),\r\n    })\r\n\r\n    return(\r\n        <div>\r\n\r\n            <img src={TwitterLogo}\r\n            alt=\"logo\"\r\n            style={{width: \"50px\"}}\r\n            className=\"logo\"\r\n            />\r\n\r\n            <h3>Zarejestruj się</h3>\r\n            <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={async(values, {setSubmitting}) => {\r\n                setSubmitting(true)\r\n                const response = await signup({\r\n                    variables: values\r\n                })\r\n                localStorage.setItem(\"token\", response.data.signup.token)\r\n                setSubmitting(false)\r\n                history.push('/users')\r\n            }}\r\n            >\r\n\r\n                <Form>\r\n                    <Field name=\"email\" type=\"text\" placeholder=\"Email\"></Field>\r\n                    <ErrorMessage name=\"email\" component={'div'} />\r\n\r\n                    <Field name=\"name\" type=\"text\" placeholder=\"Name\"></Field>\r\n                    <ErrorMessage name=\"name\" component={'div'} />\r\n\r\n                    <Field name=\"password\" type=\"password\" placeholder=\" Password \"></Field>\r\n                    <ErrorMessage name=\"password\" component={'div'} />\r\n\r\n                    <Field name=\"confirmpassword\" type=\"password\" placeholder=\"Confirm Password\"></Field>\r\n                    <ErrorMessage name=\"confirmpassword\" component={'div'} />\r\n\r\n                    <button type=\"submit\" className=\"login-button\"><span>Zaloguj się</span></button>\r\n                </Form>\r\n            </Formik>\r\n                <div className=\"register\">\r\n                    <h4>Masz już konto?</h4>\r\n                    <Link to=\"/login\">Zaloguj się</Link>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup","C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\index.tsx",[],"C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\pages\\Login.tsx",["56"],"import React from 'react'\r\nimport {gql, useMutation} from '@apollo/client'\r\nimport {ErrorMessage, Field, Form, Formik} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport TwitterLogo from \"../styles/assets/twitter-logo.png\"\r\n\r\nconst LOGIN_MUTATION = gql`\r\nmutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n        token\r\n    }\r\n}\r\n`\r\n\r\ninterface LoginValues {\r\n    email: string\r\n    password: string\r\n}\r\n\r\nfunction Login() {\r\n    const history = useHistory()\r\n    const [login, { data }] = useMutation(LOGIN_MUTATION)\r\n\r\n    const initialValues: LoginValues = {\r\n        email: \"\",\r\n        password: \"\",\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string()\r\n            .email(\"Niewłaściwy adres email\")\r\n            .required(\"Wymagany adres email\"),\r\n        password: Yup.string()\r\n            .max(20, \"Maksymalnie 20 znaków\")\r\n            .required(\"Wymagane hasło\"),\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            <img src={TwitterLogo}\r\n            alt=\"logo\"\r\n            style={{width: \"50px\"}}\r\n            className=\"logo\"\r\n            />\r\n\r\n            <h3>Zaloguj się do Twittera</h3>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={async (values, { setSubmitting }) => {\r\n                    setSubmitting(true)\r\n                    const response = await login({\r\n                        variables: values\r\n                    })\r\n                    localStorage.setItem(\"token\", response.data.login.token)\r\n                    setSubmitting(false)\r\n                    history.push('/users')\r\n                }}\r\n            >\r\n\r\n                <Form>\r\n                    <Field name=\"email\" type=\"text\" placeholder=\"Email\"></Field>\r\n                    <ErrorMessage name=\"email\" component={'div'} />\r\n\r\n                    <Field name=\"password\" type=\"password\" placeholder=\" Password \"></Field>\r\n                    <ErrorMessage name=\"password\" component={'div'} />\r\n\r\n                    <button type=\"submit\" className=\"login-button\" ><span>Zaloguj się</span></button>\r\n                </Form>\r\n\r\n            </Formik>\r\n            <div className=\"register\">\r\n                <h4>Nie masz konta?</h4>\r\n                <Link to=\"/signup\">Zarejestruj się</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\components\\IsAuthenticated.tsx",["57"],"import React, { Children } from 'react'\r\nimport {gql, useQuery} from '@apollo/client'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst IS_LOGED_IN =gql`\r\n{\r\n    me {\r\n        id\r\n    }\r\n}`\r\n\r\ninterface Props {\r\n    children?: React.ReactNode\r\n}\r\n\r\nexport default function IsAuthenticated({children}: Props) {\r\n    const {loading, error, data} = useQuery(IS_LOGED_IN)\r\n    if (loading) return <p>\r\n        Loading...\r\n    </p>\r\n    if (error) return <p> \r\n        {error.message}\r\n    </p>\r\n    if(!data.me) {\r\n        return <Redirect to={{pathname: '/landing'}} />\r\n    }\r\n    return <>{children}</>\r\n}","C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\pages\\Profile.tsx",["58"],"C:\\Users\\Nobody\\Desktop\\Projekt\\web\\src\\components\\CreateProfile.tsx",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"59","replacedBy":"63"},{"ruleId":"61","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":25,"column":21,"nodeType":"67","messageId":"68","endLine":25,"endColumn":25},{"ruleId":"65","severity":1,"message":"66","line":23,"column":21,"nodeType":"67","messageId":"68","endLine":23,"endColumn":25},{"ruleId":"65","severity":1,"message":"69","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":25},{"ruleId":"65","severity":1,"message":"66","line":19,"column":28,"nodeType":"67","messageId":"68","endLine":19,"endColumn":32},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],["70"],["71"],"@typescript-eslint/no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'Children' is defined but never used.","no-global-assign","no-unsafe-negation"]